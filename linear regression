{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **Sales prediction (Simple Linear Regression)**"],"metadata":{"id":"9HcBCYndDJ_o"}},{"cell_type":"markdown","source":["Problem Statement\n","Build a model which predicts sales."],"metadata":{"id":"5mtufr1JLeHK"}},{"cell_type":"code","execution_count":26,"metadata":{"id":"a2USh4btoHHc","executionInfo":{"status":"ok","timestamp":1671666414911,"user_tz":-120,"elapsed":351,"user":{"displayName":"Malak Mahmoud Aref","userId":"07028559829613996497"}}},"outputs":[],"source":["import warnings\n","warnings.filterwarnings('ignore')\n","#Import Required Libraries\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns"]},{"cell_type":"code","source":["# Read the Dataset\n","data=pd.read_csv('/content/shampoo_sales.csv')\n","data.head()"],"metadata":{"id":"PJubyO4YqRMh","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1671666415919,"user_tz":-120,"elapsed":5,"user":{"displayName":"Malak Mahmoud Aref","userId":"07028559829613996497"}},"outputId":"75a7ac86-e130-440e-95e9-cbac4075f142"},"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Month  Sales\n","0  1-01  266.0\n","1  1-02  145.9\n","2  1-03  183.1\n","3  1-04  119.3\n","4  1-05  180.3"],"text/html":["\n","  <div id=\"df-ef20a8da-8307-4014-8bd6-3aa568c702ef\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Month</th>\n","      <th>Sales</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1-01</td>\n","      <td>266.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1-02</td>\n","      <td>145.9</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1-03</td>\n","      <td>183.1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1-04</td>\n","      <td>119.3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1-05</td>\n","      <td>180.3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ef20a8da-8307-4014-8bd6-3aa568c702ef')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ef20a8da-8307-4014-8bd6-3aa568c702ef button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ef20a8da-8307-4014-8bd6-3aa568c702ef');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["# convert the month to numeric data by adding extra column called (convert) to reolace each month to numbers begining from 0 to do operations on convert column instead of month\n","data['Convert']=pd.factorize(data.Month)[0]\n","data.head(10)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"BEJqaPZWK9eS","executionInfo":{"status":"ok","timestamp":1671666417952,"user_tz":-120,"elapsed":252,"user":{"displayName":"Malak Mahmoud Aref","userId":"07028559829613996497"}},"outputId":"0dd6d772-2160-4a5c-8ca0-d312c22bdfb2"},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Month  Sales  Convert\n","0  1-01  266.0        0\n","1  1-02  145.9        1\n","2  1-03  183.1        2\n","3  1-04  119.3        3\n","4  1-05  180.3        4\n","5  1-06  168.5        5\n","6  1-07  231.8        6\n","7  1-08  224.5        7\n","8  1-09  192.8        8\n","9  1-10  122.9        9"],"text/html":["\n","  <div id=\"df-fb074ade-871d-4f8b-88a5-b69f85bc3b02\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Month</th>\n","      <th>Sales</th>\n","      <th>Convert</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1-01</td>\n","      <td>266.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1-02</td>\n","      <td>145.9</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1-03</td>\n","      <td>183.1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1-04</td>\n","      <td>119.3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1-05</td>\n","      <td>180.3</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>1-06</td>\n","      <td>168.5</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>1-07</td>\n","      <td>231.8</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>1-08</td>\n","      <td>224.5</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>1-09</td>\n","      <td>192.8</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>1-10</td>\n","      <td>122.9</td>\n","      <td>9</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fb074ade-871d-4f8b-88a5-b69f85bc3b02')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-fb074ade-871d-4f8b-88a5-b69f85bc3b02 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-fb074ade-871d-4f8b-88a5-b69f85bc3b02');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["# plot to see how sales are related with the month variable\n","sns.pairplot(data, x_vars=['Month'], y_vars='Sales', height=13, aspect=1, kind='scatter')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":938},"id":"g5l3dq0krhZp","outputId":"6e6598b4-7b2d-4fcb-bedc-ed0bf12d10d8","executionInfo":{"status":"ok","timestamp":1671666420726,"user_tz":-120,"elapsed":1126,"user":{"displayName":"Malak Mahmoud Aref","userId":"07028559829613996497"}}},"execution_count":29,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 936x936 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["# Model Building"],"metadata":{"id":"bgjYaArvNVt6"}},{"cell_type":"code","source":["# assign the feature variables we will use convert instead of month because month isn't numeric so we can't do operations on it\n","X = data['Convert']\n","y = data['Sales']"],"metadata":{"id":"LedVRwTFtopu","executionInfo":{"status":"ok","timestamp":1671666422461,"user_tz":-120,"elapsed":365,"user":{"displayName":"Malak Mahmoud Aref","userId":"07028559829613996497"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["# here we will split our variable into training and testing sets\n","from sklearn.model_selection import train_test_split\n","# It is a good practice to keep 70% of the data in your train dataset and the rest 30% in your test dataset\n","X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.7, test_size = 0.3, random_state = 100)"],"metadata":{"id":"y8JrQB8UuV1q","executionInfo":{"status":"ok","timestamp":1671666423281,"user_tz":-120,"elapsed":4,"user":{"displayName":"Malak Mahmoud Aref","userId":"07028559829613996497"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["X_train.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x0R6p8uGuexE","outputId":"28de92be-6acd-4a0f-b0f6-5f61a4bd2eb2","executionInfo":{"status":"ok","timestamp":1671666424956,"user_tz":-120,"elapsed":348,"user":{"displayName":"Malak Mahmoud Aref","userId":"07028559829613996497"}}},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["22    22\n","6      6\n","13    13\n","9      9\n","26    26\n","Name: Convert, dtype: int64"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["y_train.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wD9k1beFutiF","outputId":"790528ec-8953-42fa-f6cf-d471d23acebc","executionInfo":{"status":"ok","timestamp":1671666425903,"user_tz":-120,"elapsed":3,"user":{"displayName":"Malak Mahmoud Aref","userId":"07028559829613996497"}}},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["22    264.5\n","6     231.8\n","13    149.5\n","9     122.9\n","26    315.9\n","Name: Sales, dtype: float64"]},"metadata":{},"execution_count":33}]},{"cell_type":"markdown","source":["# Building a Linear Model"],"metadata":{"id":"_OAc1bncO3Uf"}},{"cell_type":"code","source":["# import the statsmodel.api library which you'll perform the linear regression.\n","import statsmodels.api as sm"],"metadata":{"id":"NPX07Fz6vATi","executionInfo":{"status":"ok","timestamp":1671666428149,"user_tz":-120,"elapsed":324,"user":{"displayName":"Malak Mahmoud Aref","userId":"07028559829613996497"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["# statsmodels library fits a line on the dataset which passes through the origin.\n","# but in order to have an intercept we will use add_constant\n","X_train_sm = sm.add_constant(X_train)\n","\n","# Fit the resgression line using 'OLS' -> Ordinary Least Squares is an attribute of statsmodel\n","lr = sm.OLS(y_train, X_train_sm).fit()"],"metadata":{"id":"SZh0yZbRwaId","executionInfo":{"status":"ok","timestamp":1671666429223,"user_tz":-120,"elapsed":3,"user":{"displayName":"Malak Mahmoud Aref","userId":"07028559829613996497"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["# Print the parameters -> the intercept and the slope of the regression line fitted\n","lr.params"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Okrh9k9nNMXJ","executionInfo":{"status":"ok","timestamp":1671666430963,"user_tz":-120,"elapsed":695,"user":{"displayName":"Malak Mahmoud Aref","userId":"07028559829613996497"}},"outputId":"9ab31021-d0cb-4de6-f461-455797e19522"},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["const      92.923985\n","Convert    11.754215\n","dtype: float64"]},"metadata":{},"execution_count":36}]},{"cell_type":"markdown","source":["### Sales = 92.9240 + 11.7542×Convert"],"metadata":{"id":"BuDAfLXYPMzB"}},{"cell_type":"code","source":["plt.scatter(X_train, y_train)\n","plt.plot(X_train, 92.9240 + 11.7542*X_train, 'r')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":267},"id":"pv73-Q5VN9z_","executionInfo":{"status":"ok","timestamp":1671666432248,"user_tz":-120,"elapsed":298,"user":{"displayName":"Malak Mahmoud Aref","userId":"07028559829613996497"}},"outputId":"68e69052-fa79-4028-98e2-ea93c9d147c0"},"execution_count":37,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["# Model Evaluation"],"metadata":{"id":"lI8GHvm3QRd8"}},{"cell_type":"markdown","source":["we will do some predictions on the test data"],"metadata":{"id":"PvSQfI9_UfN2"}},{"cell_type":"code","source":["# so add a constant to X_test\n","X_test_sm = sm.add_constant(X_test)\n","\n","# Predict the y values corresponding to X_test_sm\n","y_pred = lr.predict(X_test_sm)"],"metadata":{"id":"sfVJQs9AR__T","executionInfo":{"status":"ok","timestamp":1671666434524,"user_tz":-120,"elapsed":218,"user":{"displayName":"Malak Mahmoud Aref","userId":"07028559829613996497"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":["y_pred.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qpIeT-pZSEB4","executionInfo":{"status":"ok","timestamp":1671666436708,"user_tz":-120,"elapsed":331,"user":{"displayName":"Malak Mahmoud Aref","userId":"07028559829613996497"}},"outputId":"77563f9a-31fc-43a9-ce08-adbd7ab1c92f"},"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0      92.923985\n","19    316.254070\n","32    469.058864\n","35    504.321509\n","7     175.203490\n","dtype: float64"]},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["from sklearn.metrics import r2_score"],"metadata":{"id":"16nNMxtMSID9","executionInfo":{"status":"ok","timestamp":1671666498495,"user_tz":-120,"elapsed":358,"user":{"displayName":"Malak Mahmoud Aref","userId":"07028559829613996497"}}},"execution_count":44,"outputs":[]},{"cell_type":"code","source":["# Checking the R-squared on the test set\n","r_squared = r2_score(y_test, y_pred)\n","r_squared"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UGUoObOcSMW8","executionInfo":{"status":"ok","timestamp":1671666500350,"user_tz":-120,"elapsed":333,"user":{"displayName":"Malak Mahmoud Aref","userId":"07028559829613996497"}},"outputId":"2345a0ea-d372-48cc-e590-21cc52907916"},"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7003178002156695"]},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["# Visualizing the fit on the test set\n","plt.scatter(X_test, y_test)\n","plt.plot(X_test, 92.9240 + 11.7542*X_test, 'r')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"LGMvaOzISPil","executionInfo":{"status":"ok","timestamp":1671666502041,"user_tz":-120,"elapsed":488,"user":{"displayName":"Malak Mahmoud Aref","userId":"07028559829613996497"}},"outputId":"7fe1a971-0780-479f-8bf0-7813d479f017"},"execution_count":46,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]}]}